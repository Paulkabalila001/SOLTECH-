import React, { useState } from 'react';

const PlantDetectionApp = () => {
  const [selectedImage, setSelectedImage] = useState(null);
  const [previewUrl, setPreviewUrl] = useState(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);

  // Mock plant database for demonstration
  const plantDatabase = [
    { id: 1, name: 'Monstera Deliciosa', confidence: 0.92, characteristics: 'Large leaves with distinctive splits and holes' },
    { id: 2, name: 'Snake Plant', confidence: 0.88, characteristics: 'Upright, sword-like leaves with yellow edges' },
    { id: 3, name: 'Fiddle Leaf Fig', confidence: 0.85, characteristics: 'Large, violin-shaped leaves' },
    { id: 4, name: 'Pothos', confidence: 0.82, characteristics: 'Heart-shaped leaves, trailing vines' },
    { id: 5, name: 'Peace Lily', confidence: 0.78, characteristics: 'Dark green leaves with white flowers' }
  ];

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    if (!file.type.match('image.*')) {
      setError('Please select an image file');
      return;
    }

    setError(null);
    setSelectedImage(file);
    setPreviewUrl(URL.createObjectURL(file));
    setResult(null);
  };

  const analyzePlant = () => {
    if (!selectedImage) {
      setError('Please select an image first');
      return;
    }

    setIsAnalyzing(true);
    setError(null);

    // Simulating API call with timeout
    setTimeout(() => {
      // For demo purposes, return a random plant from our database
      const randomIndex = Math.floor(Math.random() * plantDatabase.length);
      setResult(plantDatabase[randomIndex]);
      setIsAnalyzing(false);
    }, 2000);
  };

  return (
    <div className="flex flex-col items-center w-full max-w-xl mx-auto p-6 bg-gradient-to-b from-green-50 to-white rounded-lg shadow-md">
      <div className="w-full text-center mb-6">
        <h1 className="text-3xl font-bold text-green-800 mb-2">Plant Identifier</h1>
        <p className="text-sm text-gray-600">
          Developed by Paul Kabalila | Â© 2025
        </p>
      </div>

      <div className="w-full mb-6">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Upload a plant photo
        </label>
        <div className="flex items-center justify-center w-full">
          <label className="flex flex-col items-center justify-center w-full h-64 border-2 border-green-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100">
            <div className="flex flex-col items-center justify-center pt-5 pb-6">
              {previewUrl ? (
                <img 
                  src={previewUrl} 
                  alt="Preview" 
                  className="w-full h-full object-contain"
                />
              ) : (
                <>
                  <svg className="w-10 h-10 mb-3 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                  </svg>
                  <p className="mb-2 text-sm text-gray-500">
                    <span className="font-semibold">Click to upload</span> or drag and drop
                  </p>
                  <p className="text-xs text-gray-500">PNG, JPG, or JPEG (MAX. 10MB)</p>
                </>
              )}
            </div>
            <input 
              type="file" 
              className="hidden" 
              onChange={handleImageChange} 
              accept="image/*" 
            />
          </label>
        </div>
        {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
      </div>

      <button
        onClick={analyzePlant}
        disabled={!selectedImage || isAnalyzing}
        className={`w-full py-3 px-4 mb-6 text-white font-semibold rounded-md transition-colors ${
          !selectedImage || isAnalyzing 
            ? 'bg-gray-400 cursor-not-allowed' 
            : 'bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500'
        }`}
      >
        {isAnalyzing ? 'Analyzing...' : 'Identify Plant'}
      </button>

      {isAnalyzing && (
        <div className="flex flex-col items-center justify-center mb-6">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-700"></div>
          <p className="mt-2 text-green-800">Analyzing your plant...</p>
        </div>
      )}

      {result && (
        <div className="w-full bg-white p-6 rounded-lg border border-green-200 shadow-sm">
          <h2 className="text-xl font-bold text-green-800 mb-2">
            {result.name}
          </h2>
          <div className="mb-4">
            <div className="flex items-center mb-1">
              <span className="text-sm text-gray-600 mr-2">Confidence:</span>
              <div className="w-full bg-gray-200 rounded-full h-2.5">
                <div 
                  className="bg-green-600 h-2.5 rounded-full" 
                  style={{ width: `${result.confidence * 100}%` }}
                ></div>
              </div>
              <span className="ml-2 text-sm font-medium text-gray-700">
                {Math.round(result.confidence * 100)}%
              </span>
            </div>
          </div>
          <p className="text-gray-700 mb-3"><strong>Characteristics:</strong> {result.characteristics}</p>
          <p className="text-sm text-gray-500 mt-4">
            Note: This is a demonstration. A full version would connect to a plant recognition API.
          </p>
        </div>
      )}

      <div className="w-full text-center mt-6">
        <p className="text-xs text-gray-500">
          For educational purposes only. Upload your plant photos to identify common houseplants.
        </p>
      </div>
    </div>
  );
};

export default PlantDetectionApp;